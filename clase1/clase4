class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
 
class Stack:
    def __init__(self):
        self.head = None
 
    def is_empty(self):
        return self.head is None
 
    def push(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
 
    def pop(self):
        if self.is_empty():
            return None
        popped_node = self.head
        self.head = self.head.next
        popped_node.next = None
        return popped_node.data
 
    def peek(self):
        if self.is_empty():
            return None
        return self.head.data
 
    def display(self):
        current = self.head
        while current:
            print(current.data, end='->')
            current = current.next
        print()

stack1 = Stack()


stack1.push(15)
stack1.push(30)
stack1.push(50)
stack1.push(100)
stack1.push(200)


print("Contenido actual de la primera pila:")
stack1.display()


stack2 = Stack()


stack2.push(80)
stack2.push(90)
stack2.push(100)


print("Contenido actual de la segunda pila:")
stack2.display()


eliminado = stack1.pop()
print("Elemento eliminado de la primera pila:", eliminado)


print("Contenido actual de la primera pila despuÃ©s de eliminar un elemento:")
stack1.display()

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
 
class Stack:
    def __init__(self):
        self.head = None
 
    def is_empty(self):
        return self.head is None
 
    def push(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
 
    def pop(self):
        if self.is_empty():
            return None
        popped_node = self.head
        self.head = self.head.next
        popped_node.next = None
        return popped_node.data
 
    def peek(self):
        if self.is_empty():
            return None
        return self.head.data
 
    def display(self):
        current = self.head
        while current:
            print(current.data, end='->')
            current = current.next
        print()
    
    def size(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next
        return count

stack = Stack()

stack.push(10)
stack.push(20)
stack.push(30)
stack.push(60)
stack.push(100)
stack.push(120)
stack.push(1111 )

print("La pila tiene", stack.size(), "elementos.")
